# -*- coding: utf-8 -*-
"""Classification&Summarization_Lab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OLgeLNSG_bpDU9KSw36OZf2j7z-RVppe
"""

!pip install langchain_community
!pip install replicate

'''Classification'''
from langchain_community.llms import Replicate
import os
from google.colab import userdata

# Set the API token
api_token = userdata.get('api_token')
os.environ["REPLICATE_API_TOKEN"] = api_token

# Model setup
model = "ibm-granite/granite-3.3-8b-instruct"
output = Replicate(
model=model,
replicate_api_token=api_token,
)

# Define the customer reviews
customer_reviews = [
 "The battery lasts all day, and the performance is excellent.",
 "The screen is too dim outdoors, but I love the colors indoors.",
 "This phone is slow and keeps crashing when I open certain apps."
]
# Refine the prompt to include reviews
reviews_text = "\n".join([f"Review {i+1}: {review}" for i, review
in enumerate(customer_reviews)])

prompt = f"""
Classify these reviews as Positive, Negative, or Mixed:
{reviews_text}
"""

# Invoke the model with the example prompt
response = output.invoke(prompt)

# Print the response
print("Granite Model Response:\n")
print(response)

# Define refined prompt
refined_prompt = f"""
Classify these reviews as positive, negative, or mixed, and tag
relevant categories (battery life, screen quality, or performance):
{reviews_text}
"""

# Invoke the model with the example prompt
response = output.invoke(refined_prompt)

# Print the response
print("\nGranite Model Refined Response:\n")
print(response)

# Define the prompt to complete the task in 2 steps
multitask_prompt = f"""
Complete the task in 2 steps.
Step 1: Classify these reviews as positive, negative, or mixed.
Step 2: For each review, identify relevant categories: battery life, screen quality, or performance.
{reviews_text}
"""
response = output.invoke(multitask_prompt)
print("Granite Model Response:\n")
print(response)

# Define the example to guide the model
formatted_prompt = f"""
Classify these reviews as Positive, Negative, or Mixed, and tag relevant categories. Use this format:
- Sentiment: [Sentiment]
- Categories: [Categories].
{reviews_text}
"""

# Invoke the model with prompt
response = output.invoke(formatted_prompt)

# Print the response
print("Granite Model Formatted Response:\n")
print(response)

'''SUMMARIZATION'''

customer_meetings = [
"""
The meeting began with a discussion of the Q3 marketing budget. It
was decided that 40% of the budget will go to digital ads, 30% to
events, and 30% to social media campaigns. The team emphasized the
need for influencer partnerships to increase brand visibility and
email marketing to boost direct engagement. A pilot program to
test new ad formats will launch next month, with the team
reviewing results by the end of Q3.
Later, the team discussed campaign performance metrics. ROI
monitoring will be a top priority, and adjustments will be made based on performance data.
The events team raised concerns about resource allocation for
upcoming trade shows, and it was agreed that an additional $10,000
would be reallocated to cover these costs.
Lastly, the team reviewed new creative concepts for the upcoming
campaign, deciding to proceed with Concept 8, which tested better
among focus groups. Deadlines for campaign assets were finalized:
all deliverables must be submitted by July 15.
"""
]

# Refine the prompt to include reviews
reviews_text = "\n".join([f"Review {i+1}: {review}" for i, review
in enumerate(customer_meetings)])
prompt = f""" Summarize this meeting: {reviews_text} """

# Invoke the model with example prompt
response = output.invoke(prompt)

# Print the response
print("Granite Model Response:\n")
print(response)

# Define refined prompt
refined_prompt = f"""
Summarize this meeting in three sentences:
{reviews_text}
"""

# Invoke the model with refined prompt
response = output.invoke(refined_prompt)

# Print the response
print("\nGranite Model Refined Response:\n")
print(response)

# Define the prompt with refined focus area prompt
refined_focusarea_prompt = f"""
Summarize this meeting by focusing on key points, decisions made,
and action items:
{reviews_text}
"""

response = output.invoke(refined_focusarea_prompt)
print("Granite Model Response for refined focus area response:\n")
print(response)

# Define the prompt with refined output prompt
refined_outputformat_prompt = f"""
Summarize this meeting into a structured format using the following
headings: Key Points Discussed, Decisions Made, and Action Items.
Mention timelines.
Include only two concise bullet points under each heading.
{reviews_text}
"""

response = output.invoke(refined_outputformat_prompt)
print("Granite Model Response for refined output format response:\n")
print(response)